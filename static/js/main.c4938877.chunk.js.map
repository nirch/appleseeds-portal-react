{"version":3,"sources":["logo.svg","shared/server.js","shared/activeUserContext.js","pages/login/LoginPage.js","components/navbar/PortalNavbar.js","pages/courses/CoursesPage.js","pages/courses/CourseDetailsPage.js","pages/users/UsersPage.js","pages/users/UserDetailsPage.js","pages/hours/HoursReportPage.js","pages/hours/HoursApprovePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","activeUser","data","type","a","token","undefined","v","request","method","url","phpDomain","JSON","stringify","headers","axios","response","server","ActiveUserContext","React","createContext","LoginPage","props","handleLogin","useState","email","setEmail","pwd","setPwd","useContext","to","Container","Form","Group","controlId","Label","Control","value","placeholder","onChange","e","target","Button","variant","onClick","pass","then","res","console","log","error","alert","err","PortalNavbar","handleLogout","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","CoursesPage","CourseDetailsPage","UsersPage","UserDetailsPage","HoursReportPage","HoursApprovePage","App","localStorage","parse","setActiveUser","removeItem","Provider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4938877.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import axios from \"axios\";\n\nasync function server(activeUser, data, type) {\n\n    const version = 2.3;\n    const phpDomain = 'https://pil1.appleseeds.org.il/dcnir/server/';\n    const imgsDomain = 'https://pil1.appleseeds.org.il/dcnir/';\n\n    // Adding the user's token to the payload\n    data.token = activeUser ? activeUser.token : undefined;\n\n    // Adding the version to the payload\n    data.v = version;\n\n    // creating the request\n    const request = {\n        method: \"post\",\n        url: phpDomain + \"datagate.php?type=\" + type,\n        data: JSON.stringify(data),\n        headers : { 'Content-Type': undefined},\n    }\n\n    const response = await axios(request);\n    return response;\n    // if (json && json.error == \"user not found\") {\n    //     loginStatus\t=false;\n    //     $rootScope.userToken = \"\";\n    //     $rootScope.isAdmin = false;\n    //     $state.transitionTo('login');\n    // }\n    // else if (json && json.error==\"access permission\")\n    // {\n    //     alert(json.error);\n    // }\n}\n\nexport default server;","import React from 'react'\n\nconst ActiveUserContext = React.createContext(null);\n\nexport default ActiveUserContext;\n","import React, { useState, useContext } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap'\nimport './login.css'\nimport server from '../../shared/server'\nimport { Redirect } from 'react-router-dom'\nimport ActiveUserContext from '../../shared/activeUserContext'\n\nconst LoginPage = (props) => {\n    const { handleLogin } = props;\n    const [email, setEmail] = useState(\"\");\n    const [pwd, setPwd] = useState(\"\");\n    const activeUser = useContext(ActiveUserContext);\n\n    const login = () => {\n\n        if(!email || !pwd)\n\t\t{\n\t\t\talert(\"נא להזין פרטי משתמש\");\n\t\t\treturn;\n        }\n        \n        const data = {email, pass: pwd};\n        server(null, data, \"login\").then(res => {\n            console.log(res);\n            if (res.data.error) {\n                alert(\"error in login\");\n            } else {\n                handleLogin(res.data);\n            }\n        }, err => {\n            console.error(err);\n        })\n    }\n\n    if (activeUser) {\n        return <Redirect to='/courses' />\n    }\n\n    return (\n\n        <Container>\n            <h1>התחברות</h1>\n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label></Form.Label>\n                    <Form.Control value={email} type=\"email\" placeholder=\"אימייל\" onChange={e => setEmail(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label></Form.Label>\n                    <Form.Control value={pwd} type=\"password\" placeholder=\"סיסמה\" onChange={e => setPwd(e.target.value)}/>\n                </Form.Group>\n\n                <Button variant=\"primary\" type=\"button\" onClick={login}>\n                    התחבר\n                </Button>\n            </Form>\n        </Container>\n    );\n}\n\nexport default LoginPage;","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap'\nimport './navbar.css'\n\nconst PortalNavbar = (props) => {\n    const { handleLogout } = props;\n\n    return (\n        <div>\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/\">פורטל תפוח</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#/courses\">קורסים</Nav.Link>\n                        <Nav.Link href=\"#/users\">משתמשים</Nav.Link>\n                        <Nav.Link href=\"#/hours-report\">דיווח שעות</Nav.Link>\n                        <Nav.Link href=\"#/hours-approve\">אישור שעות</Nav.Link>\n                        <Nav.Link onClick={handleLogout}>התנתקות</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default PortalNavbar;","import React, { useContext } from 'react';\nimport './courses.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst CoursesPage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>קורסים</h1>\n        </div>\n    );\n}\n\nexport default CoursesPage;","import React, { useContext } from 'react';\nimport './courses.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst CourseDetailsPage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>פרטי קורס</h1>\n        </div>\n    );\n}\n\nexport default CourseDetailsPage;","import React, { useContext } from 'react';\nimport './users.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst UsersPage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n    \n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>משתמשים</h1>\n        </div>\n    );\n}\n\nexport default UsersPage;","import React, { useContext } from 'react';\nimport './users.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst UserDetailsPage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>פרטי משתמש</h1>\n        </div>\n    );\n}\n\nexport default UserDetailsPage;","import React, { useContext } from 'react';\nimport './hours.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst HoursReportPage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>דיווח שעות</h1>\n        </div>\n    );\n}\n\nexport default HoursReportPage;","import React, { useContext } from 'react';\nimport './hours.css'\nimport PortalNavbar from '../../components/navbar/PortalNavbar';\nimport ActiveUserContext from '../../shared/activeUserContext'\nimport { Redirect } from 'react-router-dom'\n\nconst HoursApprovePage = (props) => {\n    const { handleLogout } = props;\n    const activeUser = useContext(ActiveUserContext);\n    \n    if (!activeUser) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>\n            <PortalNavbar handleLogout={handleLogout}/>\n            <h1>אישור שעות</h1>\n        </div>\n    );\n}\n\nexport default HoursApprovePage;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport { Switch, Route } from 'react-router-dom'\nimport LoginPage from './pages/login/LoginPage'\nimport CoursesPage from './pages/courses/CoursesPage'\nimport CourseDetailsPage from './pages/courses/CourseDetailsPage'\nimport UsersPage from './pages/users/UsersPage'\nimport UserDetailsPage from './pages/users/UserDetailsPage'\nimport HoursReportPage from './pages/hours/HoursReportPage'\nimport HoursApprovePage from './pages/hours/HoursApprovePage'\nimport ActiveUserContext from './shared/activeUserContext'\n\nimport './App.css';\n\nconst App = () => {\n\n  const [activeUser, setActiveUser] = useState(localStorage.activeUser ? JSON.parse(localStorage.activeUser) : null);\n\n  const handleLogin = (activeUser) => {\n    setActiveUser(activeUser);\n    localStorage.activeUser = JSON.stringify(activeUser);\n  }\n\n  const handleLogout = () => {\n    setActiveUser(null);\n    localStorage.removeItem(\"activeUser\");\n  }\n\n  return (\n    <ActiveUserContext.Provider value={activeUser}>\n      <Switch>\n        <Route exact path=\"/\">\n          <LoginPage handleLogin={handleLogin} />\n        </Route>\n        <Route exact path=\"/courses\">\n          <CoursesPage handleLogout={handleLogout}/>\n        </Route>\n        <Route path=\"/courses/:id\">\n          <CourseDetailsPage handleLogout={handleLogout}/>\n        </Route>\n        <Route exact path=\"/users\">\n          <UsersPage handleLogout={handleLogout}/>\n        </Route>\n        <Route path=\"/users/:id\">\n          <UserDetailsPage handleLogout={handleLogout}/>\n        </Route>\n        <Route path=\"/hours-report\">\n          <HoursReportPage handleLogout={handleLogout}/>\n        </Route>\n        <Route path=\"/hours-approve\">\n          <HoursApprovePage handleLogout={handleLogout}/>\n        </Route>\n      </Switch>\n    </ActiveUserContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}